/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF_L 0
#define LOW_L 1
#define RAI_L 2
#define NUM_L 3
#define ARR_L 4
#define BLE_L 5
#define TES_L 6


/	{
	behaviors {
		ht: hold_tap_mods_standard {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <300>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
        
        // hold-tap fast
		htf: hold_tap_mods_fast {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <190>;
			quick-tap-ms = <300>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};

        // hold-tap slow
		hts: hold_tap_mods_slow {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <250>;
			quick-tap-ms = <300>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};

	};


	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp TAB			&kp Q			&kp W		 	&kp E		 	&kp R		   	&kp T					&kp Y			&kp U		  	&kp I			&kp O			&kp P			&kp BKSP
				&lt ARR_L ESC	&hts LGUI A		&ht LALT S	 	&ht LCTRL D 	&htf LSHIFT F  	&kp G					&kp H			&htf RSHIFT J  	&ht RCTRL K		&ht LALT L		&hts LGUI SEMI	&kp QUOT
				&kp LSHIFT		&kp Z			&kp X		 	&kp C		 	&kp V		   	&kp B					&kp N			&kp M		  	&kp COMMA		&kp DOT			&kp FSLH		&kp ENTER
																&kp LCTRL	 	&mo NUM_L	   	&mo LOW_L				&mo RAI_L		&kp SPACE	  	&mo BLE_L
			>;
		};


		lower_layer {
			bindings = <
				&kp LS(GRAVE)	&kp LS(N1)		&kp LS(N2)	  	&kp LS(N3)		&kp LS(N4)		&kp LS(N5)	  			&kp LS(N6)		&kp LS(N7)		&kp LS(N8)		&kp LS(N9)		&kp LS(N0)		&kp LBKT
				&kp RA(GRAVE)	&kp RA(N1)		&kp RA(N2)  	&kp RA(N3)		&kp RA(N4)		&kp RA(N5)				&kp RA(N6)		&kp LS(RBKT)	&kp LS(EQUAL)	&kp LS(MINUS) 	&kp	EQUAL		&kp MINUS	
				&bootloader		&trans			&trans			&kp NUHS		&trans			&kp LG(LS(S))			&trans			&trans			&trans			&trans			&trans			&kp CAPS
																&kp LBKT		&kp ENTER		&trans					&kp SPACE		&trans 			&trans 
			>;
		};


		raise_layer {
			bindings = <
				&kp GRAVE		&kp N1			&kp N2		  	&kp N3			&kp N4			&kp N5		  			&kp N6			&kp N7			&kp N8			&kp N9			&kp N0			&kp DEL
				&trans			&trans			&trans			&trans			&trans			&trans					&trans			&kp RA(APOS)	&kp RA(NUHS)	&kp RA(LBKT)	&kp RA(RBKT)	&trans			
				&trans			&trans			&trans			&kp LS(NUHS)	&trans			&trans					&trans			&kp NUBS		&kp LS(NUBS)	&trans			&trans			&kp LA(LC(DEL))
																&kp ENTER		&kp SPACE		&mo TES_L				&trans			&bootloader		&trans 
			>;
		};


		num_layer {
			bindings = <
				&trans 			&kp F1	  		&kp F2			&kp F3			&kp F4			&trans					&trans			&kp N7			&kp N8			&kp N9			&kp LS(RBKT)	&kp BKSP
				&trans			&kp F5			&kp F6			&kp F7			&kp F8			&trans					&trans			&kp N4			&kp N5			&kp N6			&kp RBKT		&trans
				&trans			&kp F9			&kp F10			&kp F11			&kp F12			&trans					&trans			&kp N1			&kp N2			&kp N3			&kp FSLH		&kp ENTER
																&trans  		&trans 			&trans					&kp COMMA		&kp DOT			&kp N0 
			>;
		};



		arrows_layer {
			bindings = <
				&kp TAB			&trans			&trans			&trans			&trans			&trans					&trans			&kp HOME		&kp UP			&kp END			&trans			&kp BKSP
				&kp ESC			&ht LGUI A		&ht LALT S	 	&ht LCTRL D 	&ht LSHIFT F  	&trans					&trans			&kp LEFT		&kp DOWN		&kp RIGHT		&trans			&trans
				&trans			&trans			&trans			&trans			&trans			&trans					&trans			&kp PAGE_UP		&trans			&kp PAGE_DOWN	&trans			&trans
																&trans  		&trans 			&trans					&trans			&trans			&trans
			>;
		};

		ble_layer {
			bindings = <
				&trans			&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4			&trans			&trans			&trans			&trans			&trans			&trans
				&trans			&trans			&trans			&trans			&trans			&trans					&sys_reset		&bt BT_CLR		&bt BT_PRV		&bt BT_NXT		&trans			&trans
				&bootloader		&trans			&trans			&trans			&trans			&trans					&trans			&trans			&trans			&trans			&trans			&bootloader
																&trans  		&trans 			&trans					&trans			&trans			&trans
			>;
		};

		test_layer {
			bindings = <
				&kp EXCL		&kp AT			&kp POUND		&kp DLLR		&kp PRCNT		&kp CARET				&kp AMPS		&kp STAR		&kp LPAR		&kp RPAR		&kp EQUAL		&kp MINUS
				&kp UNDER		&kp FSLH		&kp QMARK		&kp BSLH		&kp NUBS		&kp PIPE2				&kp SEMI		&kp COLON		&kp SQT			&kp DQT			&kp COMMA		&kp LT
				&kp DOT			&kp GT			&kp LBKT		&kp RBKT		&kp GRAVE		&kp TILDE				&kp NUHS		&kp TILDE2		&trans			&trans			&trans			&trans
																&trans  		&trans 			&trans					&trans			&trans			&trans
			>;
		};

	};
};
